# Projeto Telecom X - Parte 2: Prevendo a Evas√£o de Clientes com Machine Learning!

## üöÄ Sobre o Projeto

Depois da primeira parte, onde eu explorei os dados para entender *por que* os clientes cancelavam o servi√ßo, o desafio aqui foi um passo al√©m: ser√° que a gente consegue **prever** quem vai cancelar?

O objetivo principal foi criar um "detetive" (nosso modelo de machine learning) que conseguisse olhar para as caracter√≠sticas de um cliente e dizer se ele tem uma alta chance de cancelar o servi√ßo (dar churn) ou n√£o. Isso √© super valioso para uma empresa, pois permite que ela atue de forma proativa para tentar reter esses clientes!

## üìÇ Estrutura dos Arquivos

Neste reposit√≥rio, voc√™ vai encontrar:

*   `CHALLENGE_ALURA_TELECOMX_PARTE_2.ipynb`: Meu notebook com todo o passo a passo da cria√ß√£o do modelo.
*   `dados_tratados.csv`: A base de dados que eu limpei e preparei na Parte 1, pronta para ser usada.
*   `README.md`: Este arquivo que voc√™ est√° lendo, explicando tudo! :)

## üõ†Ô∏è Como eu preparei os dados para a m√°gica acontecer!

Antes de ensinar nosso modelo, precisei fazer um √∫ltimo preparo nos dados. Modelos de machine learning s√£o super inteligentes, mas eles n√£o entendem texto, s√≥ n√∫meros!

#### 1. Transformando Texto em N√∫meros (One-Hot Encoding)
Colunas como "Tipo de Contrato" ou "G√™nero" precisavam virar n√∫meros. Usei uma t√©cnica chamada *One-Hot Encoding* que, de forma simples, cria novas colunas de 0 e 1 para cada categoria. Por exemplo, a coluna `genero` virou `genero_Masculino`, que √© `1` se o cliente for homem e `0` se for mulher.

#### 2. Deixando tudo na mesma "r√©gua" (Normaliza√ß√£o)
Notei que algumas colunas tinham valores muito diferentes, como o total gasto (que podia ser milhares) e o tempo de contrato (que ia at√© 72). Para o modelo n√£o dar mais import√¢ncia para os n√∫meros grandes s√≥ por serem grandes, eu usei uma t√©cnica chamada `StandardScaler`. Ela coloca todas as colunas na mesma escala, o que ajuda o modelo a aprender de forma mais justa e r√°pida.

#### 3. A "cola na prova" (Separa√ß√£o em Treino e Teste)
Para saber se meu modelo realmente aprendeu e n√£o s√≥ "decorou" as respostas, eu separei os dados:
*   **70% para Treino:** Foi o material que eu dei para o modelo "estudar".
*   **30% para Teste:** Foi a "prova final", dados que o modelo nunca tinha visto, para testar se ele era bom de verdade.

## üß† Construindo e Avaliando o Modelo

#### Por que a Regress√£o Log√≠stica?
Como estou come√ßando, escolhi a **Regress√£o Log√≠stica**. √â um modelo super famoso, r√°pido e √≥timo para problemas de classifica√ß√£o de "sim" ou "n√£o", como o nosso (o cliente cancela ou n√£o?).

#### E o resultado? Nosso modelo √© bom?
Fiquei bem feliz com o resultado do nosso primeiro modelo!

*   **Acur√°cia de 81.50%:** Isso significa que, de cada 100 clientes, nosso modelo acertou a previs√£o para cerca de 81 deles. Um √≥timo come√ßo!

*   **Identificando quem vai cancelar (o mais importante!):**
    De todos os clientes que realmente cancelaram o servi√ßo no nosso grupo de teste, o modelo conseguiu **identificar corretamente 57% deles**. Pode n√£o parecer perfeito, mas isso j√° d√° para a empresa uma lista valiosa de clientes para entrar em contato e tentar reter!

    O erro mais chato que ele cometeu foi deixar passar 239 clientes que cancelaram (os "Falsos Negativos"). √â aqui que a gente pode tentar melhorar no futuro!

## üí° Principais Descobertas (Insights)

Este modelo confirmou o que a gente j√° suspeitava na primeira an√°lise: o perfil do cliente com maior risco de cancelar √© aquele com **contrato mensal** e **pouco tempo de servi√ßo**. O modelo provavelmente aprendeu a dar um peso maior para essas caracter√≠sticas na hora de fazer a previs√£o.

## üíª Como Executar o Projeto

Quer testar o projeto voc√™ mesma? √â bem simples!

1.  **Baixe os arquivos:** Fa√ßa o download do notebook `CHALLENGE_ALURA_TELECOMX_PARTE_2.ipynb` e do arquivo `dados_tratados.csv`.
2.  **Use o Google Colab:** Abra o Google Colab, clique em `Arquivo > Upload de notebook` e selecione o arquivo `.ipynb`.
3.  **Fa√ßa o Upload dos Dados:** No menu esquerdo do Colab, clique no √≠cone de pasta e depois no √≠cone de upload para subir o arquivo `dados_tratados.csv`.
4.  **Instale as bibliotecas:** A primeira c√©lula do notebook j√° deve conter os `imports` necess√°rios (`pandas`, `scikit-learn`, etc). O Colab j√° tem quase tudo instalado!
5.  **Execute as c√©lulas:** Rode as c√©lulas uma por uma, na ordem, e acompanhe a m√°gica acontecer!
